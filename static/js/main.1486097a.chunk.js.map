{"version":3,"sources":["Components/Cards/Cards.js","Components/Cards/CountryCards.js","Components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Cards","covidGlobalData","confirmed","recovered","deaths","date","className","Grid","container","spacing","justify","item","component","Card","xs","md","CardContent","Typography","gutterBottom","variant","end","duration","separator","Date","toDateString","CountryCards","covidCountryData","countryConfirmed","countryRecovered","countryDeaths","Footer","App","handleChange","e","setState","country","target","value","handleSubmit","preventDefault","countryFound","axios","url","method","responseType","then","res","countriesArray","data","Countries","i","length","Country","toLowerCase","state","console","log","TotalConfirmed","countryData","TotalRecovered","TotalDeaths","countryText","isSearchLoaded","alert","globalData","isLoaded","globalConfirmed","Global","globalRecovered","globalDeaths","lastUpdatedDate","this","onSubmit","TextField","id","label","inputProps","style","fontSize","InputLabelProps","type","onChange","placeholder","Button","size","color","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1486097a.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport '../../App.scss';\n\nconst Cards = ({covidGlobalData: { confirmed, recovered, deaths, date } }) => { \n    return(\n        <div className=\"status\">\n            <Grid container spacing = {5} justify =\"center\">\n                <Grid className=\"card1\" item component={Card} xs={12} md={3}>\n                    <CardContent>\n                        <Typography gutterBottom>Global Confirmed</Typography>\n                        <Typography variant=\"h4\">\n                            <CountUp end = {confirmed} duration={2} separator=\",\"/>\n                        </Typography>\n                        <Typography>{new Date(date).toDateString()}</Typography>\n                        <Typography>Active cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid className=\"card2\" item component={Card} xs={12} md={3}>\n                    <CardContent>\n                        <Typography gutterBottom>Global Recovered</Typography>\n                        <Typography variant=\"h4\">\n                        <CountUp end = {recovered} duration={2} separator=\",\"/>\n                        </Typography>\n                        <Typography>{new Date(date).toDateString()}</Typography>\n                        <Typography>Recovered cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid className=\"card3\" item component={Card} xs={12} md={3}>\n                    <CardContent>\n                        <Typography gutterBottom>Global Deaths</Typography>\n                        <Typography variant=\"h4\"><CountUp end = {deaths} duration={2} separator=\",\"/></Typography>\n                        <Typography>{new Date(date).toDateString()}</Typography>\n                        <Typography>Death cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Cards;\n\n","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport '../../App.scss';\n\nconst CountryCards = ({ covidCountryData : { countryConfirmed, countryRecovered, countryDeaths, date}}) => { \n    return(\n        <div className=\"status\">\n            <Grid container spacing = {5} justify =\"center\">\n                <Grid className=\"countryCard1\" item component={Card} xs={12} md={3}>\n                    <CardContent>\n                        <Typography gutterBottom>Confirmed</Typography>\n                        <Typography variant=\"h4\">\n                            <CountUp end = {countryConfirmed} duration={2} separator=\",\"/>\n                        </Typography>\n                        <Typography>{new Date(date).toDateString()}</Typography>\n                        <Typography>Active cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid className=\"countryCard2\" item component={Card} xs={12} md={3}>\n                    <CardContent>\n                        <Typography gutterBottom>Recovered</Typography>\n                        <Typography variant=\"h4\">\n                        <CountUp end = {countryRecovered} duration={2} separator=\",\"/>\n                        </Typography>\n                        <Typography>{new Date(date).toDateString()}</Typography>\n                        <Typography>Recovered cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid className=\"countryCard3\" item component={Card} xs={12} md={3}>\n                    <CardContent>\n                        <Typography gutterBottom>Deaths</Typography>\n                        <Typography variant=\"h4\"><CountUp end = {countryDeaths} duration={2} separator=\",\"/></Typography>\n                        <Typography>{new Date(date).toDateString()}</Typography>\n                        <Typography>Death cases of COVID-19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default CountryCards;\n\n","import React from 'react';\nimport '../../App.scss';\n\nconst Footer = () =>{\n    return(\n        <div className=\"footer\">Created by Ryan Shao &copy; 2020</div>\n    )           \n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport Cards from './Components/Cards/Cards';\nimport CountryCards from './Components/Cards/CountryCards';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Footer from './Components/Footer/Footer'\nimport './App.scss';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(){\n        super();\n        this.state = {\n          globalData: {},\n          countryData: {},\n          country: '',\n          countryFound: false,\n          countryText: '',\n          isLoaded: false,\n          isSearchLoaded: false,\n        }\n    }\n\n    //Obtain API data for Default (GLOBAL status)\n    componentDidMount(){\n        axios({\n          url: `https://api.covid19api.com/summary`,\n          method: `GET`,\n          responseType: `json`\n        }).then((res) => {\n          const globalConfirmed = res.data.Global.TotalConfirmed;\n          const globalRecovered = res.data.Global.TotalRecovered;\n          const globalDeaths = res.data.Global.TotalDeaths;\n          const lastUpdatedDate = res.data.Date;\n\n          this.setState({\n            globalData: {\n              confirmed: globalConfirmed, \n              recovered: globalRecovered, \n              deaths: globalDeaths,\n              date: lastUpdatedDate\n            },\n            isLoaded: true,\n          })\n\n        })\n    }\n\n    //Obtain API data for Input Country\n    handleChange = (e) => {\n      this.setState({\n        country: e.target.value,\n      });\n    }\n\n    handleSubmit = (e) => {\n      e.preventDefault();\n\n      //Reset to default state when user submits new input\n      this.setState({\n        countryFound: false,\n      });\n\n      axios({\n        url: `https://api.covid19api.com/summary`,\n        method: `GET`,\n        responseType: `json`\n      }).then((res) => {\n        const countriesArray = res.data.Countries;\n\n        for (let i = 0; i < countriesArray.length; i++){\n          if (countriesArray[i].Country.toLowerCase() === this.state.country.toLowerCase()){\n            console.log(countriesArray[i].TotalConfirmed);\n            this.setState({\n              countryData: {\n                countryConfirmed: countriesArray[i].TotalConfirmed,\n                countryRecovered: countriesArray[i].TotalRecovered,\n                countryDeaths: countriesArray[i].TotalDeaths,\n                date: countriesArray[i].Date\n              },\n              countryFound: true,\n              countryText: countriesArray[i].Country,\n              isSearchLoaded: true\n            })\n          }\n        }\n        if (this.state.countryFound === false){\n          alert(\"Please try another country!\")\n        }\n        this.setState({\n          country: '',\n        })\n      })\n    }\n    \n\n  render(){\n      return (\n        <div className = \"App\">\n          <div className=\"row\">\n            <h1>Covid Tracker</h1>    \n            {this.state.isLoaded ? \n              < Cards covidGlobalData = {this.state.globalData}/>\n              : <p>loading...</p>\n            }       \n            <form className = \"formContainer\" onSubmit={ this.handleSubmit }>\n              <TextField className = \"input\" id=\"standard-basic\" label=\"Country\" inputProps={{style: {fontSize: 18}}} InputLabelProps={{style: {fontSize: 18}}} type=\"text\" value={this.state.country} onChange = {this.handleChange} placeholder=\"Search Country\"/>\n              \n              <Button className=\"button\" variant=\"contained\" size=\"medium\" color=\"primary\" style={{ fontSize: '20px'}} type=\"submit\">Search</Button>\n            </form>\n            <h2>{this.state.countryText}</h2>\n            {this.state.isSearchLoaded ?\n              < CountryCards covidCountryData = {this.state.countryData}/>\n              : <p>Please input a country!</p> \n            }\n          </div>\n          < Footer />\n        </div> \n      );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}