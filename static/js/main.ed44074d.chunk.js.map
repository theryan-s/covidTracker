{"version":3,"sources":["Components/DataDisplay.js","App.js","serviceWorker.js","index.js"],"names":["DataDisplay","className","this","props","TotalConfirmed","TotalRecovered","TotalDeaths","Component","App","handleChange","e","setState","country","target","value","handleSubmit","preventDefault","axios","url","method","responseType","then","res","countriesArray","data","Countries","i","length","Country","state","console","log","globalConfirmed","Global","globalRecovered","globalDeaths","onSubmit","type","onChange","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iRAyBeA,G,kLAnBP,OACA,yBAAKC,UAAU,UACX,yBAAKA,UAAU,kBACX,+CACA,2BAAIC,KAAKC,MAAMC,iBAEnB,yBAAKH,UAAU,kBACX,+CACA,2BAAIC,KAAKC,MAAME,iBAEnB,yBAAKJ,UAAU,eACX,4CACA,2BAAIC,KAAKC,MAAMG,mB,GAfLC,c,gBCsFXC,E,kDAlFb,aAAc,IAAD,8BACP,gBA4BJC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,QAASF,EAAEG,OAAOC,SA/BX,EAmCXC,aAAe,SAACL,GACdA,EAAEM,iBACFC,IAAM,CACJC,IAAI,qCACJC,OAAO,MACPC,aAAa,SACZC,MAAK,SAACC,GAGP,IAFA,IAAMC,EAAiBD,EAAIE,KAAKC,UAEvBC,EAAI,EAAGA,EAAIH,EAAeI,OAAQD,IACrCH,EAAeG,GAAGE,UAAY,EAAKC,MAAMjB,SAC3CkB,QAAQC,IAAIR,EAAeG,GAAGtB,gBAQlC,EAAKO,SAAS,CACZC,QAAS,SArDX,EAAKiB,MAAQ,CACXL,KAAM,GACNZ,QAAS,IAJJ,E,gEASS,IAAD,OACfK,IAAM,CACJC,IAAI,qCACJC,OAAO,MACPC,aAAa,SAEZC,MAAK,SAACC,GACP,IAAMU,EAAkBV,EAAIE,KAAKS,OAAO7B,eAClC8B,EAAkBZ,EAAIE,KAAKS,OAAO5B,eAClC8B,EAAeb,EAAIE,KAAKS,OAAO3B,YACrCwB,QAAQC,IAAIT,GAEZ,EAAKX,SAAS,CACZa,KAAM,CAACQ,EAAiBE,EAAiBC,U,+BAwC/C,OACE,yBAAKlC,UAAY,OACf,yBAAKA,UAAU,OACb,6CACA,4BACI,kBAAE,EAAF,CAAcG,eAAkBF,KAAK2B,MAAML,KAAK,GAAInB,eAAkBH,KAAK2B,MAAML,KAAK,GAAIlB,YAAeJ,KAAK2B,MAAML,KAAK,MAG7H,0BAAMY,SAAWlC,KAAKa,cACpB,+BACA,2BAAOsB,KAAK,OAAOvB,MAAOZ,KAAK2B,MAAMjB,QAAS0B,SAAYpC,KAAKO,aAAc8B,YAAY,uBAEzF,4BAAQF,KAAK,UAAb,iB,GA3EI9B,aCMEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,a","file":"static/js/main.ed44074d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.scss';\n\nclass DataDisplay extends Component {\n    \n    render(){\n        return(\n        <div className=\"status\">\n            <div className=\"totalConfirmed\">\n                <h2>Total Confirmed</h2>\n                <p>{this.props.TotalConfirmed}</p>\n            </div>\n            <div className=\"totalRecovered\">\n                <h2>Total Recovered</h2>\n                <p>{this.props.TotalRecovered}</p>\n            </div>\n            <div className=\"totalDeaths\">\n                <h2>Total Deaths</h2>\n                <p>{this.props.TotalDeaths}</p>\n            </div>\n        </div>\n        )\n    }\n}\n\nexport default DataDisplay;","import React, { Component } from 'react';\nimport Form from './Components/Form';\nimport DataDisplay from './Components/DataDisplay';\nimport './App.scss';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(){\n        super();\n        this.state = {\n          data: [],\n          country: '',\n        }\n    }\n\n    //Obtain API data for Default (GLOBAL status)\n    componentDidMount(){\n        axios({\n          url: `https://api.covid19api.com/summary`,\n          method: `GET`,\n          responseType: `json`\n\n        }).then((res) => {\n          const globalConfirmed = res.data.Global.TotalConfirmed;\n          const globalRecovered = res.data.Global.TotalRecovered;\n          const globalDeaths = res.data.Global.TotalDeaths;\n          console.log(res)\n\n          this.setState({\n            data: [globalConfirmed, globalRecovered, globalDeaths]\n          })\n\n        })\n    }\n\n    //Obtain API data for Input Country\n    handleChange = (e) => {\n      this.setState({\n        country: e.target.value,\n      });\n    }\n\n    handleSubmit = (e) => {\n      e.preventDefault();\n      axios({\n        url: `https://api.covid19api.com/summary`,\n        method: `GET`,\n        responseType: `json`\n      }).then((res) => {\n        const countriesArray = res.data.Countries;\n\n        for (let i = 0; i < countriesArray.length; i++){\n          if (countriesArray[i].Country === this.state.country){\n            console.log(countriesArray[i].TotalConfirmed);\n            \n          // } else {\n          //   alert(\"Please try another country!\");\n          //   e.preventDefault();\n          } \n        }\n\n        this.setState({\n          country: \"\"\n        })\n      })\n    }\n\n\n  render(){\n      return (\n        <div className = \"App\">\n          <div className=\"row\">\n            <h1>Covid Tracker</h1>\n            <ul>\n              { < DataDisplay TotalConfirmed = {this.state.data[0]} TotalRecovered = {this.state.data[1]} TotalDeaths = {this.state.data[2]}/>\n              }\n            </ul>\n            <form onSubmit={ this.handleSubmit }>\n              <label>\n              <input type=\"text\" value={this.state.country} onChange = {this.handleChange} placeholder=\"Search Country...\"/>\n              </label>\n              <button type=\"submit\">Search</button>\n            </form>\n          </div>\n        </div>\n      );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}